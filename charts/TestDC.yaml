apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  labels:
    argocd.argoproj.io/instance: kafka-cluster
  name: kafka-cluster
  namespace: sepsis-demo
spec:
  entityOperator:
    topicOperator:
      livenessProbe:
        initialDelaySeconds: 15
        timeoutSeconds: 5
      readinessProbe:
        initialDelaySeconds: 10
        timeoutSeconds: 5
      resources:
        limits:
          cpu: 500m
          memory: 500M
        requests:
          cpu: 250m
          memory: 250M
    userOperator:
      livenessProbe:
        initialDelaySeconds: 15
        timeoutSeconds: 5
      readinessProbe:
        initialDelaySeconds: 10
        timeoutSeconds: 5
      resources:
        limits:
          cpu: ''
          memory: 250M
        requests:
          cpu: 150m
          memory: 150M
  kafka:
    config:
      inter.broker.protocol.version: 3.1
      min.insync.replicas: 1
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3
    jvmOptions:
      gcLoggingEnabled: false
    listeners:
      - name: plain
        port: 9092
        tls: false
        type: internal
      - name: tls
        port: 9093
        tls: true
        type: internal
    livenessProbe:
      initialDelaySeconds: 45
      timeoutSeconds: null
    metrics:
      lowercaseOutputName: true
      rules:
        - labels:
            clientId: $3
            partition: $5
            topic: $4
          name: kafka_server_$1_$2
          pattern: >-
            kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+),
            partition=(.*)><>Value
          type: GAUGE
        - labels:
            broker: '$4:$5'
            clientId: $3
          name: kafka_server_$1_$2
          pattern: >-
            kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+),
            brokerPort=(.+)><>Value
          type: GAUGE
        - labels:
            cipher: $5
            listener: $2
            networkProcessor: $3
            protocol: $4
          name: kafka_server_$1_connections_tls_info
          pattern: >-
            kafka.server<type=(.+), cipher=(.+), protocol=(.+), listener=(.+),
            networkProcessor=(.+)><>connections
          type: GAUGE
        - labels:
            clientSoftwareName: $2
            clientSoftwareVersion: $3
            listener: $4
            networkProcessor: $5
          name: kafka_server_$1_connections_software
          pattern: >-
            kafka.server<type=(.+), clientSoftwareName=(.+),
            clientSoftwareVersion=(.+), listener=(.+),
            networkProcessor=(.+)><>connections
          type: GAUGE
        - labels:
            listener: $2
            networkProcessor: $3
          name: kafka_server_$1_$4
          pattern: 'kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+):'
          type: GAUGE
        - labels:
            listener: $2
            networkProcessor: $3
          name: kafka_server_$1_$4
          pattern: 'kafka.server<type=(.+), listener=(.+), networkProcessor=(.+)><>(.+)'
          type: GAUGE
        - name: kafka_$1_$2_$3_percent
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>MeanRate'
          type: GAUGE
        - name: kafka_$1_$2_$3_percent
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)Percent\w*><>Value'
          type: GAUGE
        - labels:
            $4: $5
          name: kafka_$1_$2_$3_percent
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)Percent\w*, (.+)=(.+)><>Value'
          type: GAUGE
        - labels:
            $4: $5
            $6: $7
          name: kafka_$1_$2_$3_total
          pattern: >-
            kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+),
            (.+)=(.+)><>Count
          type: COUNTER
        - labels:
            $4: $5
          name: kafka_$1_$2_$3_total
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)PerSec\w*, (.+)=(.+)><>Count'
          type: COUNTER
        - name: kafka_$1_$2_$3_total
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)PerSec\w*><>Count'
          type: COUNTER
        - labels:
            $4: $5
            $6: $7
          name: kafka_$1_$2_$3
          pattern: 'kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value'
          type: GAUGE
        - labels:
            $4: $5
          name: kafka_$1_$2_$3
          pattern: 'kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value'
          type: GAUGE
        - name: kafka_$1_$2_$3
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)><>Value'
          type: GAUGE
        - labels:
            $4: $5
            $6: $7
          name: kafka_$1_$2_$3_count
          pattern: 'kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count'
          type: COUNTER
        - labels:
            $4: $5
            $6: $7
            quantile: 0.$8
          name: kafka_$1_$2_$3
          pattern: >-
            kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*),
            (.+)=(.+)><>(\d+)thPercentile
          type: GAUGE
        - labels:
            $4: $5
          name: kafka_$1_$2_$3_count
          pattern: 'kafka.(\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count'
          type: COUNTER
        - labels:
            $4: $5
            quantile: 0.$6
          name: kafka_$1_$2_$3
          pattern: 'kafka.(\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\d+)thPercentile'
          type: GAUGE
        - name: kafka_$1_$2_$3_count
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)><>Count'
          type: COUNTER
        - labels:
            quantile: 0.$4
          name: kafka_$1_$2_$3
          pattern: 'kafka.(\w+)<type=(.+), name=(.+)><>(\d+)thPercentile'
          type: GAUGE
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    replicas: 3
    resources:
      limits:
        cpu: '1'
        memory: 2G
      requests:
        cpu: 300m
        memory: 500M
    storage:
      deleteClaim: true
      size: 5Gi
      type: persistent-claim
    version: 3.1.0
  kafkaExporter:
    enableSaramaLogging: true
    groupRegex: .*
    livenessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    logging: warn
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 200m
        memory: 64Mi
    topicRegex: ^topic-.+
  zookeeper:
    livenessProbe:
      initialDelaySeconds: 30
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 15
      timeoutSeconds: 5
    replicas: 3
    resources:
      limits:
        cpu: 500m
        memory: 250M
      requests:
        cpu: 100m
        memory: 100M
    storage:
      deleteClaim: true
      size: 1Gi
      type: persistent-claim
